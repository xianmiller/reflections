What happens when you initialize a repository? Why do you need to do it?
1. git creates the framework for tracking the content in the repository.
2. we need to do it in order to correctly commit files into the repository when needed.

How is the staging area different from the working directory and the repository? What value do you think it offers?
1. the staging area is an intermediary between the working diretory and the repository
2. it allows the user to specifically designate which files to commit (or not) prior to actually committing the files to the repository.

How can you use the staging area to make sure you have one commit per logical change?
1. by using the diff command and diff --staged command, you can compare the changes to the content between working directory,
staging area, and the latest commit.  This ensures that single logcal changes can be committed at a time.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
1. Branches would be helpful when adding an experimental feature, and want to test it before adding it to the main code.
OR, when adding a language version, or maybe a new interface. Basically when you are not 100% that it should be implemented.
2. Branches help by maintaining a clean 'master' branch for what you know works, while a branch is something that might not get implemented.

How do the diagrams help you visualize the branch structure?
1. they help visualize where they left from the master, and if you have a detached head.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
1. it combines the code from each branch into a new head point.
2. because it combines the two into one.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
1. Pros are that it doesnt require oversight, and can quickly add features to the master, or allow testing of new features using the master code
Cons are that it may not know exactly what needs to change when the same area was changed in both branches. works best when only different areas change.
2. Pros of doing merge manually, is that you always know exactly what parts of the code to use from each branch.
Cons is that it takes longer to review items which do not overlap or are in conflict.

